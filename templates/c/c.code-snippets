{
	// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Include Guards": {
        "prefix": "includeGuard",
        "body": [
            "#ifndef ${1:HEADER_NAME}_H",
            "#define ${1:HEADER_NAME}_H",
            "",
            "\t/* Declarations and definitions here */",
            "",
            "#endif // ${1:HEADER_NAME}_H"
        ],
        "description": "Include guards for a header file"
    },
	"For Loop": {
		"prefix": "fori",
		"body": [
			"for (int ${1:i} = 0; ${1:i} < ${2:count}; ${1:i}++) {",
			"\t${0}",
			"}"
		],
		"description": "Create a for loop"
	},
	"Memory Allocation Check": {
        "prefix": "malloccheck",
        "body": [
            "if (${1:ptr} == NULL) {",
            "\tfprintf(stderr, \"Memory allocation failed\\n\");",
            "\texit(EXIT_FAILURE);",
            "}"
        ],
        "description": "Memory allocation check"
    },
	"Debug Print Macro": {
        "prefix": "DEBUGPRINT",
        "body": [
            "#define DEBUG",
			"",
			"#ifdef DEBUG",
			"\t#define DEBUG_PRINT(fmt, ...) fprintf(stderr, \"DEBUG [%s:%d]: \" fmt, __FILE__, __LINE__, ##__VA_ARGS__)",
			"#else",
    		"\t#define DEBUG_PRINT(fmt, ...)",
			"#endif"
        ],
        "description": "Debug print macro"
    },
}